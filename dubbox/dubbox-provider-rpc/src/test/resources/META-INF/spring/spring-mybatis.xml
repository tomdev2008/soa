<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:task="http://www.springframework.org/schema/task" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd  
        http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-4.0.xsd  
        http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.0.xsd    
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd    
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd    
        http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.0.xsd    
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">

	<!-- JNDI方式配置数据源 -->
	<!-- <bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean"> 
		<property name="jndiName" value="${jndiName}"></property> </bean> -->

	<!-- ========================================配置数据源========================================= -->
	<!-- 配置数据源，使用的是alibaba的Druid(德鲁伊)数据源 -->

	<bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

		<!-- 初始化连接大小 -->
		<property name="initialSize" value="${jdbc.initialSize}" />
		<!-- 连接池最大使用连接数量 -->
		<property name="maxActive" value="${jdbc.maxActive}" />
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="${jdbc.minIdle}" />
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="${jdbc.maxWait}" />

		<property name="validationQuery" value="${jdbc.validationQuery}" />
		<property name="testOnBorrow" value="${jdbc.testOnBorrow}" />
		<property name="testOnReturn" value="${jdbc.testOnReturn}" />
		<property name="testWhileIdle" value="${jdbc.testWhileIdle}" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}" />

		<!-- 打开removeAbandoned功能 -->
		<property name="removeAbandoned" value="${jdbc.removeAbandoned}" />
		<!-- 1800秒，也就是30分钟 -->
		<property name="removeAbandonedTimeout" value="${jdbc.removeAbandonedTimeout}" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="${jdbc.logAbandoned}" />

		<!-- 监控数据库 -->
		<property name="filters" value="${jdbc.filters}" />
	</bean>

	<!-- ========================================分隔线============================ -->

	<!-- =================================针对myBatis的配置项======================= -->

	<!-- 配置 sqlSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 实例化sqlSessionFactory时需要使用上述配置好的数据源以及SQL映射文件 -->
		<property name="dataSource" ref="dataSource" />

		<!-- 自动扫描com/ouc/mapping/目录下的所有SQL映射的xml文件, 省掉Configuration.xml里的手工配置 value="classpath:com/ouc/mapping/*.xml"指的是classpath(类路径)下com.ouc.mapping包中的所有xml文件 
			UserMapper.xml位于com.ouc.mapping包下，这样UserMapper.xml就可以被自动扫描 -->

		<property name="mapperLocations" value="classpath:com/ttfc/soa/dubbo/provider/mapper/*.xml" />
		<property name="typeAliasesPackage" value="com.ttfc.soa.dubbo.provider.domain" />
		<property name="configLocation" value="classpath:mybatis-config.xml" /> 
	</bean>

	<!-- 配置 扫描器 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 扫描com.ouc.dao这个包以及它的子包下的所有映射接口类 -->
		<property name="basePackage" value="com.ttfc.soa.dubbo.provider.mapper" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>

	<!-- ========================================分隔线============================ -->

	<!-- 配置Spring的事务管理 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>


	<!-- 注解方式配置事物 -->
	<!-- <tx:annotation-driven transaction-manager="transactionManager" /> -->

	<!-- 拦截器方式配置事物 -->
	<!-- <tx:advice id="transactionAdvice" transaction-manager="transactionManager"> 
		<tx:attributes> <tx:method name="add*" propagation="REQUIRED" /> <tx:method 
		name="append*" propagation="REQUIRED" /> <tx:method name="insert*" propagation="REQUIRED" 
		/> <tx:method name="save*" propagation="REQUIRED" /> <tx:method name="update*" 
		propagation="REQUIRED" /> <tx:method name="modify*" propagation="REQUIRED" 
		/> <tx:method name="edit*" propagation="REQUIRED" /> <tx:method name="delete*" 
		propagation="REQUIRED" /> <tx:method name="remove*" propagation="REQUIRED" 
		/> <tx:method name="repair" propagation="REQUIRED" /> <tx:method name="delAndRepair" 
		propagation="REQUIRED" /> <tx:method name="get*" propagation="SUPPORTS" /> 
		<tx:method name="find*" propagation="SUPPORTS" /> <tx:method name="load*" 
		propagation="SUPPORTS" /> <tx:method name="search*" propagation="SUPPORTS" 
		/> <tx:method name="datagrid*" propagation="SUPPORTS" /> <tx:method name="*" 
		propagation="SUPPORTS" /> <:attributes> <:advice> <aop:config> <aop:pointcut 
		id="transactionPointcut" expression="execution(* com.ouc.service..*Impl.*(..))" 
		/> <aop:advisor pointcut-ref="transactionPointcut" advice-ref="transactionAdvice" 
		/> </aop:config> -->

	<!-- 配置druid监控spring jdbc -->
	<!-- <bean id="druid-stat-interceptor" class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor"> 
		</bean> <bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut" 
		scope="prototype"> <property name="patterns"> <list> <value>com.ouc.service.*<alue> 
		<st> </property> </bean> <aop:config> <aop:advisor advice-ref="druid-stat-interceptor" 
		pointcut-ref="druid-stat-pointcut" /> </aop:config> -->
</beans>  